






RUN ON ALL NODES























###################################################################################################

**VAReceiverActor**

*EDITOR INTERFACE*

Is used to setup the main settings in the szene. For example it controls / sets up the connection to the VA server the general world.
General Settings: 
*  Scale: The ratio of the virtual Environment to the real world environment (default = 100)
*  Updates per second: How many (position) updates should be done per minute (default = 30)
*  Ask for Debug mode: Whether the plugin should ask to start in Debug mode or not (default = true)
*  Which VA Server version: Used for the automatic python connection to decide which version should be started (default = 2018.a)

Connection:
*  Usecase: Automatic, Localhost, Cave, Manual. Changes how the connection should be established. Automatic checks first with python, then if its on windows it connects with localhost, at linux with Cave settings. (default = Automatic)
*  IP Adress: IP Adress for the manual connection (default = 10.0.1.240 (CAVE))
*  Port: Port for the manual connection (default = 12340 (default port of VA Server))
*  Remote VAServer Start Port: The port for the python script (default 41578)

Directivity Manager:
*  Name of ini file for directivities: Name of the ini file for the directivity mapping that should be used (default = Study/VADir_default.ini)


*C++ INTERFACE FUNCTIONS*

*  SetUpdateRate(float): Set Rate to send position data to the VA Server
*  ReadDirMappingFile(FString): Read a new file for Directivity Mapping
*  SetHRIRByFileName(FString): Sets the HRIR for the Receiver 




*MAPPING FILE*
	It works as followed:
	# Symbol the list is devided (default ",")
	listSymbol=,

	# Symbol the mapping is done (default ":")
	mapToSymbol=:
	
	# Mapping in form: 
	# e.g.: mapping=phoneme1,phoeneme2,phoneme3:file1
	# e.g.: mapping=default,phoneme4:file2
	# default = used when something cannot be found
	
	mapping=a,b,c:$(HumanDir)






###################################################################################################


**VASOUNDSOURCECOMPONENT**

This is the sound component simulating a sound source and its reflections by the FAReflectionWalls on the VAServer

*EDITOR INTERFACE*
General Settings: 
*  Sound Name: File of the sound
*  Action: Action of the Sound at start.
*  Play from x: Point in time of the sound file at the begining.
*  Loop: Whether too loop the sound or not
*  Use reflections: Whether to reflect this sound source at the VAReflectionWalls
*  Sound Power: The Power of the sound in Watts (The default value of 31.67 mW (105 dB re 10e-12 Watts) corresponds to 1 Pascal (94.0 dB SPL re 20e-6 Pascal ) in a distance of 1 m for spherical spreading.)

Position: 
*  Position Settings: How the Component should act relative to its owner
*  Use Offset: Check if want to use Offset
*  Offset Position: Position Offset, available when using Offset
*  Offset Rotation: Rotation Offset, available when using Offset
*  Bone Name: Name of bone to which the sound source should be bound. Only available when attatching to bone.

Directivity: 
*  Directivity: Decide which setting for the directivities should be used. 
*  Directivity by file name: Initial Directivity created by its file name.
*  Phoneme Directivity from config: Intitial Directivity by mapping in Receiver owner

*C++ INTERFACE FUNCTIONS*

Playback Settings: 			
*  PlaySound()						Play 
*  PlaySoundFromSecond(float)		Play from second of file
*  StopSound()						Stop
*  PauseSound()						Pause

Sound Settings: 
*  MuteSound(bool)						Mute / unmute sound (true = mute)
*  LoadSoundFile(FString)				Load a sound file (for later usage)
*  SetSoundFile(FString)				Set a sound file (if already loaded, taking the loaded one, if not creating new sound)
*  GetSoundFile()						Gets the name of the current sound file
*  SetSoundPower(float)					Sets the sound power in watts
*  GetSoundPower()						Gets the sound power in watts
*  SetLoop(bool)						Sets whether to loop or not (true = loop)
*  GetLoop()							Gets whether sound loops or not (true = loop)
*  GetHandleReflections()				Gets whether to handle reflections for this sound source









Sound Pose
*  GetPosition()						Gets the position of the sound source
*  GetRotation()						Gets the rotation of the sound source
*  SetMovementSetting(EMovement)		Sets how the position of the movement should be set (0 = Move with object, 1 = Object Spawn Point, 2 = Attatch to bone)
*  SetUsePoseOffset(bool)				Sets whether to use offset or not
*  SetOffsetPosition(FVector)			Sets position offset (if activated)
*  SetOffsetRotation(FRotator)			Sets rotation offset (if activated)


Directivities							
*  SetDirectivityByMapping(FString)		Sets directivity based on mapping of VAReceiverActor
*  SetDirectivityByFileName(FString)	Sets directivity based on file name
*  GetDirectivityFileName()				Gets the file name of the current directivity


Graphical Representation				
*  SetVisibility(bool)					Sets the visibility of the sound representation
*  GetVisibility()						Gets the visibility of the sound representation
*  SetBoneName(FString)					Sets the bound bone name and activates 
*  GetBoneName()						Gets the name of the bone the sound source is attached to






###################################################################################################


**VAReflectionWall**

Drag & Drop wherever it should be. It does not matter in which direction, as long as the plane is alligned correctly with the wall.

*EDITOR INTERFACE*
*  Transform: Position & Rotation of Wall
*  Reflection Factor: Reflection value R of the wall.








###################################################################################################


















